using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
public static class UserSessionManager
{
    // –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞
    private static ConcurrentDictionary<long, UserSession> sessions = new ConcurrentDictionary<long, UserSession>();

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, –ø–æ–ª—É—á–∞–µ–º—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    public static async Task HandleCommand(ITelegramBotClient botClient, Message message)
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–∞ –≤ –Ω—ë–º
        if (message == null || message.Text == null) return;

        var chatId = message.Chat.Id;
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é; –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        if (!sessions.TryGetValue(chatId, out var session))
        {
            session = new UserSession { ChatId = chatId, State = UserState.None };
            sessions.TryAdd(chatId, session);
        }

        var userInput = message.Text.Trim().ToLower();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        switch (userInput)
        {
            case "/start":
            case "üîÑ —Å–±—Ä–æ—Å":
                session.Reset();
                await SendLanguageSelection(botClient, chatId);
                break;
            default:
                // –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                if (userInput.Contains("english") || userInput.Contains("1"))
                {
                    session.Language = Language.English;
                    session.State = UserState.AwaitingName;
                    await botClient.SendTextMessageAsync(chatId, "Great! Let's start with English. What's your name?");
                }
                else if (userInput.Contains("spanish") || userInput.Contains("2"))
                {
                    session.Language = Language.Spanish;
                    session.State = UserState.AwaitingName;
                    await botClient.SendTextMessageAsync(chatId, "¬°Genial! Empecemos con espa√±ol. ¬øC√≥mo te llamas?");
                }
                else
                {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
                    await HandleStateSpecificCommands(botClient, session, message);
                }
                break;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    private static async Task SendLanguageSelection(ITelegramBotClient botClient, long chatId)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new KeyboardButton[] { "1. English", "2. Spanish" },
            new KeyboardButton[] { "üîÑ –°–±—Ä–æ—Å" }
        })
        { ResizeKeyboard = true };

        await botClient.SendTextMessageAsync(chatId, "Hello! I can teach you two languages: English and Spanish. Please choose which one you'd like to learn:", replyMarkup: keyboard);
    }

    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    private static async Task HandleStateSpecificCommands(ITelegramBotClient botClient, UserSession session, Message message)
    {
        var chatId = session.ChatId;
        string userInput = message.Text.Trim().ToLower();

        switch (session.State)
        {
            case UserState.AwaitingName:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await HandleNameInput(botClient, session, chatId, userInput);
                break;
            case UserState.Introduction:
            case UserState.ChooseCategory:
                // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —è–∑—ã–∫–∞
                await HandleLanguagePractice(botClient, session, chatId, userInput);
                break;
            case UserState.AwaitingAnswer:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await HandleAnswer(botClient, session, chatId, userInput);
                break;
            default:
                // –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                await botClient.SendTextMessageAsync(chatId, session.Language == Language.English
                    ? "Unknown command. Please try again. ü§∑‚Äç‚ôÇÔ∏è"
                    : "Comando desconocido. Por favor, intenta de nuevo. ü§∑‚Äç‚ôÇÔ∏è");
                break;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    private static async Task HandleNameInput(ITelegramBotClient botClient, UserSession session, long chatId, string userInput)
    {
        session.UserName = userInput;
        session.State = UserState.Introduction;
        await botClient.SendTextMessageAsync(chatId, session.Language == Language.English
            ? $"Welcome, {session.UserName}! I'm excited to help you learn English. Could you tell me a bit about yourself?"
            : $"Bienvenido, {session.UserName}! Estoy emocionado de ayudarte a aprender espa√±ol. ¬øPodr√≠as contarme un poco sobre ti?");
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    private static async Task SendMenu(ITelegramBotClient botClient, long chatId, Language language)
    {
        string message = language == Language.English
            ? "Choose an exercise to continue practicing English:"
            : "Elige un ejercicio para continuar practicando espa√±ol:";

        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new KeyboardButton[] { "üìö Grammar", "üìñ Vocabulary" },
            new KeyboardButton[] { "üí¨ Idioms", "üó£ Phrasal Verbs" },
            new KeyboardButton[] { "üó® Conversation Practice", "üëÄ Reading", "‚úç Writing" },
            new KeyboardButton[] { "üîÑ –°–±—Ä–æ—Å" }
        })
        { ResizeKeyboard = true };

        await botClient.SendTextMessageAsync(chatId, message, replyMarkup: keyboard);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏ —è–∑—ã–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private static async Task HandleLanguagePractice(ITelegramBotClient botClient, UserSession session, long chatId, string userInput)
    {
        if (userInput.Contains("introduce") || session.State == UserState.Introduction)
        {
            string response = session.Language == Language.English
                ? "Oh, very interesting! Now, how about we expand your skills with some specific exercises? Choose a category you'd like to explore:"
                : "¬°Oh, qu√© interesante! Ahora, ¬øqu√© te parece si ampliamos tus habilidades con algunos ejercicios espec√≠ficos? Elige una categor√≠a que te gustar√≠a explorar:";

            await botClient.SendTextMessageAsync(chatId, response);
            session.State = UserState.ChooseCategory;
            await SendMenu(botClient, chatId, session.Language);
        }
        else
        {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            await HandleCategorySelection(botClient, session, chatId, userInput);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    private static async Task HandleCategorySelection(ITelegramBotClient botClient, UserSession session, long chatId, string category)
    {
        switch (category)
        {
            case "üìö grammar":
            case "üìñ vocabulary":
            case "üí¨ idioms":
            case "üó£ phrasal verbs":
            case "üó® conversation practice":
            case "üëÄ reading":
            case "‚úç writing":
                await HandleSelectedCategory(botClient, session, chatId, category);
                break;
            default:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                await botClient.SendTextMessageAsync(chatId, session.Language == Language.English
                    ? "I didn't understand that. Please choose a category by clicking a button below."
                    : "No entend√≠ eso. Por favor, elige una categor√≠a haciendo clic en un bot√≥n de abajo.");
                await SendMenu(botClient, chatId, session.Language);
                break;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    private static async Task HandleSelectedCategory(ITelegramBotClient botClient, UserSession session, long chatId, string category)
    {
        string question = "";
        switch (category)
        {
            case "üìö grammar":
                question = session.Language == Language.English ? "What is the past tense of 'go'?" : "¬øCu√°l es el tiempo pasado de 'ir'?";
                session.CurrentAnswer = session.Language == Language.English ? "went" : "fui";
                break;
            case "üìñ vocabulary":
                question = session.Language == Language.English ? "What is the synonym of 'happy'?" : "¬øCu√°l es el sin√≥nimo de 'feliz'?";
                session.CurrentAnswer = session.Language == Language.English ? "joyful" : "contento";
                break;
            case "üí¨ idioms":
                question = session.Language == Language.English ? "What does 'break the ice' mean?" : "¬øQu√© significa 'romper el hielo'?";
                session.CurrentAnswer = session.Language == Language.English ? "start a conversation" : "empezar una conversaci√≥n";
                break;
            case "üó£ phrasal verbs":
                question = session.Language == Language.English ? "What does 'give up' mean?" : "¬øQu√© significa 'give up'?";
                session.CurrentAnswer = session.Language == Language.English ? "surrender" : "rendirse";
                break;
            case "üó® conversation practice":
                question = session.Language == Language.English ? "How do you introduce yourself?" : "¬øC√≥mo te presentas?";
                session.CurrentAnswer = session.Language == Language.English ? "My name is..." : "Me llamo...";
                break;
            case "üëÄ reading":
                question = session.Language == Language.English ? "Read this sentence and tell me the main idea:" : "Lee esta frase y dime la idea principal:";
                session.CurrentAnswer = session.Language == Language.English ? "The main idea is..." : "La idea principal es...";
                break;
            case "‚úç writing":
                question = session.Language == Language.English ? "Write a short paragraph about your favorite hobby." : "Escribe un p√°rrafo corto sobre tu pasatiempo favorito.";
                session.CurrentAnswer = session.Language == Language.English ? "My favorite hobby is..." : "Mi pasatiempo favorito es...";
                break;
        }

        session.CurrentQuestion = question;
        session.State = UserState.AwaitingAnswer;

        await botClient.SendTextMessageAsync(chatId, question);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    private static async Task HandleAnswer(ITelegramBotClient botClient, UserSession session, long chatId, string userInput)
    {
        if (userInput.Equals(session.CurrentAnswer, StringComparison.OrdinalIgnoreCase))
        {
            session.Score++;
            await botClient.SendTextMessageAsync(chatId, session.Language == Language.English
                ? $"Correct! üéâ Your score is now {session.Score}."
                : $"¬°Correcto! üéâ Tu puntuaci√≥n es ahora de {session.Score}.");
        }
        else
        {
            await botClient.SendTextMessageAsync(chatId, session.Language == Language.English
                ? $"Incorrect. The correct answer is: {session.CurrentAnswer}. ‚ùå"
                : $"Incorrecto. La respuesta correcta es: {session.CurrentAnswer}. ‚ùå");
        }

        session.State = UserState.ChooseCategory;
        await SendMenu(botClient, chatId, session.Language);
    }
}

// –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
public class UserSession
{
    public long ChatId { get; set; }
    public UserState State { get; set; }
    public Language Language { get; set; } = Language.None;
    public string CurrentQuestion { get; set; } = "";
    public string CurrentAnswer { get; set; } = "";
    public int Score { get; set; }
    public string UserName { get; set; } = "";

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    public void Reset()
    {
        State = UserState.None;
        CurrentQuestion = "";
        CurrentAnswer = "";
        Score = 0;
        Language = Language.None;
        UserName = "";
    }
}

// –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–µ—Å—Å–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
public enum UserState
{
    None,
    AwaitingName,
    Introduction,
    ChooseCategory,
    AwaitingAnswer
}

public enum Language
{
    None,
    English,
    Spanish
}
